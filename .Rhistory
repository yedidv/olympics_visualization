library(tidyverse)
## Name the function
Fun1<- function(x){
return(x^3 + 3 * x^2 - 2*x + 4)
}
## Define the x variables
x <- seq(-4, 1, length(500))
Bisection(Fun1, min(x), max(x))
answers <- tibble(x = x,
f_x = Fun1(x))
view(answers)
## Define the x variables
x <- seq(-4, 1, length = 500)
## Bisection Method Function
Bisection <- function(fun, ## Call the f(x) functions
a, ## left point for bisection
b, ## right point for bisection
tol = 1e-6, ## tolerance between a and b
maxN = 200 ## we want to have a max on iterations
## if no solution we don't want a
## data leak
){
## Check and make sure x* is between a and b
fa <- fun(a)
fb <- fun(b)
if (fa * fb > 0){
stop('The solution is not between the bounds [a,b].
Widen the search')
}
## Check if c = x*
c <- (a + b) / 2
fc <- fun(c)
if ( abs(fc) < tol | abs(a - b) < tol){
return(c)
}
## Main loop
for( i in 1:maxN){ ## We don't want the loop to be infinite
if(fc * fa < 0){
## Left side
b <- c
fb <- fc
}
else{
## Right side
a <- c
fa <- fc
}
if ( abs(fc) < tol | abs(a - b) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', c))
message(sprintf('\tf(x*) = %5.4f', fc))
return(c)
}
c <- (a + b) / 2
fc <- fun(c)
}
message(print('No Solution found'))
}
Bisection(Fun1, min(x), max(x))
answers <- tibble(x = x,
f_x = Fun1(x))
view(answers)
ggplot(answers, aes(x = x, y = f_x))
ggplot(answers, aes(x = x, y = f_x)) + geom_line()
glimpse(answers)
source('~/Desktop/msba/spring2021/Fin_Computation_Simulation/homework/hw3/hw3.r')
library(tidyverse)
## Name the function
Fun1<- function(x){
return(x^3 + 3 * x^2 - 2*x + 4)
}
## Define the x variables
x <- seq(-4, 1, length = 500)
## Bisection Method Function
Bisection <- function(fun, ## Call the f(x) functions
a, ## left point for bisection
b, ## right point for bisection
tol = 1e-6, ## tolerance between a and b
maxN = 200 ## we want to have a max on iterations
## if no solution we don't want a
## data leak
){
## Check and make sure x* is between a and b
fa <- fun(a)
fb <- fun(b)
if (fa * fb > 0){
stop('The solution is not between the bounds [a,b].
Widen the search')
}
## Check if c = x*
c <- (a + b) / 2
fc <- fun(c)
if ( abs(fc) < tol | abs(a - b) < tol){
return(c)
}
## Main loop
for( i in 1:maxN){ ## We don't want the loop to be infinite
if(fc * fa < 0){
## Left side
b <- c
fb <- fc
}
else{
## Right side
a <- c
fa <- fc
}
if ( abs(fc) < tol | abs(a - b) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', c))
message(sprintf('\tf(x*) = %5.4f', fc))
return(c)
}
c <- (a + b) / 2
fc <- fun(c)
}
message(print('No Solution found'))
}
Bisection(Fun1, min(x), max(x))
answers <- tibble(x = x,
f_x = Fun1(x))
ggplot(answers, aes(x = x, y = f_x)) + geom_line()
return(x1)
Newton <- function(fun, df, x0,
tol = 1e-6, maxN = 200){
##Check for convergence
if (abs(fun(x0)) < tol){
message('Guessed correct: x0 = x*!')
return(x0)
}
for(i in 1:maxN){
f0 <- fun(x0)
df0 <- df(x0)
x1 <- x0 - f0 / df0
if (abs(fun(x1)) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', c))
message(sprintf('\tf(x*) = %5.4f', f(x1)))
return(x1)
}
x0 <- x1
}
message('Warning - reached max iterations')
return(x1)
}
## Call the function
fun <- function(x){return(x^3 + 3 * x^2 - 2 * x + 4)}
df <- function(x){return(3 * x^2 + 6 * x - 2)}
x_newt <- Newton(fun, df, x0 = -5)
message(sprintf('\tx = %5.4f', x1))
message(sprintf('\tf(x*) = %5.4f', f(x1)))
return(x1)
if (abs(fun(x1)) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', x1))
message(sprintf('\tf(x*) = %5.4f', f(x1)))
return(x1)
}
x0 <- x1
for(i in 1:maxN){
f0 <- fun(x0)
df0 <- df(x0)
x1 <- x0 - f0 / df0
if (abs(fun(x1)) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', x1))
message(sprintf('\tf(x*) = %5.4f', f(x1)))
return(x1)
}
x0 <- x1
}
message('Warning - reached max iterations')
return(x1)
Newton <- function(fun, df, x0,
tol = 1e-6, maxN = 200){
##Check for convergence
if (abs(fun(x0)) < tol){
message('Guessed correct: x0 = x*!')
return(x0)
}
for(i in 1:maxN){
f0 <- fun(x0)
df0 <- df(x0)
x1 <- x0 - f0 / df0
if (abs(fun(x1)) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', x1))
message(sprintf('\tf(x*) = %5.4f', f(x1)))
return(x1)
}
x0 <- x1
}
message('Warning - reached max iterations')
return(x1)
}
## Call the function
fun <- function(x){
return(x^3 + 3 * x^2 - 2 * x + 4)
}
df <- function(x){
return(3 * x^2 + 6 * x - 2)
}
x_newt <- Newton(fun, df, x0 = -5)
##Check for convergence
if (abs(fun(x0)) < tol){
message('Guessed correct: x0 = x*!')
return(x0)
}
Newton <- function(fun, df, x0,
tol = 1e-6, maxN = 200){
##Check for convergence
if (abs(fun(x0)) < tol){
message('Guessed correct: x0 = x*!')
return(x0)
}
for(i in 1:maxN){
f0 <- fun(x0)
df0 <- df(x0)
x1 <- x0 - f0 / df0
if (abs(fun(x1)) < tol){
message(sprintf('Solution achieved in %d iterations', i))
message(sprintf('\tx = %5.4f', x1))
message(sprintf('\tf(x*) = %5.4f', fun(x1)))
return(x1)
}
x0 <- x1
}
message('Warning - reached max iterations')
return(x1)
}
## Call the function
fun <- function(x){
return(x^3 + 3 * x^2 - 2 * x + 4)
}
df <- function(x){
return(3 * x^2 + 6 * x - 2)
}
x_newt <- Newton(fun, df, x0 = -5)
x_newt <- Newton(fun, df, x0 = -5)
x_bisect <- Bisection(fun, -5, 5)
setwd("~/Desktop/msba/spring2021/applied_analytics/case_studies/olympics_visualization")
setwd("~/Desktop/msba/spring2021/applied_analytics/case_studies/olympics_visualization")
#### Read in Data and packages ######
library(tidyverse)
library(plotly)
library(shiny)
library(reshape2)
## Read in both csvs, and full join them together
olympics <- read_csv('case_1_data/OlympicHistoryAthletes.csv') %>%
full_join(read_csv('case_1_data/noc_regions.csv') ) %>%
mutate(Year = as.integer(Year))
##### Format the Data ####
## In the medal category, the null values mean the player didn't win a medal
olympics <- olympics %>%
## Replace null with no_medal to show they
## didn't win anything
mutate(Medal = replace_na(Medal, 'no_medal')) %>%
## Order by year
arrange(Year)
## Create Dummy variables for the medals
olympics <- olympics %>%
## Gold, silver, bronze, and no medals are the dummy variables
mutate(gold = ifelse(Medal == 'Gold', 1, 0) ) %>%
mutate(silver = ifelse(Medal == 'Silver', 1, 0) ) %>%
mutate(no_medal = ifelse(Medal == 'no_medal', 1, 0) ) %>%
mutate(bronze = ifelse(Medal == 'Bronze', 1, 0) ) %>%
## Remove the one null year variable
filter(!is.na(Year)) %>%
## Singapore is the NOC for a bunch of random region names.
## So it can be fixed here
mutate(region = ifelse(NOC == 'SGP', 'Singapore', region))
View(olympics)
## Create Dummy variables for the medals
olympics <- olympics %>%
## Gold, silver, bronze, and no medals are the dummy variables
mutate(gold = ifelse(Medal == 'Gold', 1, 0) ) %>%
mutate(silver = ifelse(Medal == 'Silver', 1, 0) ) %>%
mutate(no_medal = ifelse(Medal == 'no_medal', 1, 0) ) %>%
mutate(bronze = ifelse(Medal == 'Bronze', 1, 0) ) %>%
## Remove the one null year variable
filter(!is.na(Year)) %>%
## Singapore is the NOC for a bunch of random region names.
## So it can be fixed here
mutate(region = ifelse(NOC == 'SGP', 'Singapore', region)) %>% drop_na()
#### Create BMI ####
bmi <- olympics %>%
mutate(bmi = Weight / Height ^2 )
summarize(bmi = average(bmi)
#### Create BMI ####
bmi <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(year, season, region) %>%
summarize(bmi = average(bmi))
#### Create BMI ####
bmi <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(year, season, region) %>%
summarize(bmi = average(bmi))
View(bmi)
setwd("~/Desktop/msba/spring2021/applied_analytics/case_studies/olympics_visualization")
#### Read in Data and packages ######
library(tidyverse)
library(plotly)
library(shiny)
library(reshape2)
## Read in both csvs, and full join them together
olympics <- read_csv('case_1_data/OlympicHistoryAthletes.csv') %>%
full_join(read_csv('case_1_data/noc_regions.csv') ) %>%
mutate(Year = as.integer(Year))
##### Format the Data ####
## In the medal category, the null values mean the player didn't win a medal
olympics <- olympics %>%
## Replace null with no_medal to show they
## didn't win anything
mutate(Medal = replace_na(Medal, 'no_medal')) %>%
## Order by year
arrange(Year)
## Create Dummy variables for the medals
olympics <- olympics %>%
## Gold, silver, bronze, and no medals are the dummy variables
mutate(gold = ifelse(Medal == 'Gold', 1, 0) ) %>%
mutate(silver = ifelse(Medal == 'Silver', 1, 0) ) %>%
mutate(no_medal = ifelse(Medal == 'no_medal', 1, 0) ) %>%
mutate(bronze = ifelse(Medal == 'Bronze', 1, 0) ) %>%
## Remove the one null year variable
filter(!is.na(Year)) %>%
## Singapore is the NOC for a bunch of random region names.
## So it can be fixed here
mutate(region = ifelse(NOC == 'SGP', 'Singapore', region)) %>% drop_na()
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(year, season, region) %>%
summarize(bmi = average(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(Year, Season, NOC) %>%
summarize(bmi = average(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(Year, Season, NOC) %>%
summarize(bmi = mean(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(Year, Season, NOC) %>%
summarize(bmi = mean(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(NOC, Year, Season) %>%
summarize(bmi = mean(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(NOC, Games) %>%
summarize(bmi = mean(bmi))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 ) %>%
group_by(Games, Event) %>%
summarize(bmi = mean(bmi))
View(bmi_df)
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / Height ^2 )
View(bmi_df)
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 )
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 ) %?%
mutate(low_bmi = ifelse(bmi <= 18.5, 1, 0)) %>%
mutate(medium_bmi = ifelse(bmi <= 25 & bmi > 18.5)) %>%
mutate(high_bmi = ifelse(bmi <= 30 & bmi > 25)) %>%
mutate(obese = ifelse(bmi > 30))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 ) %>%
mutate(low_bmi = ifelse(bmi <= 18.5, 1, 0)) %>%
mutate(medium_bmi = ifelse(bmi <= 25 & bmi > 18.5)) %>%
mutate(high_bmi = ifelse(bmi <= 30 & bmi > 25)) %>%
mutate(obese = ifelse(bmi > 30))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 ) %>%
mutate(low_bmi = ifelse(bmi <= 18.5, 1, 0)) %>%
mutate(medium_bmi = ifelse(bmi <= 25 & bmi > 18.5, 1, 0)) %>%
mutate(high_bmi = ifelse(bmi <= 30 & bmi > 25, 1, 0)) %>%
mutate(obese = ifelse(bmi > 30, 1, 0))
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 ) %>%
select(Sex, Age, Height, Weight, Games, NOC, Medal,
gold, silver, bronze, no_medal, bmi) %>%
mutate(low_bmi = ifelse(bmi <= 18.5, 1, 0)) %>%
mutate(medium_bmi = ifelse(bmi <= 25 & bmi > 18.5, 1, 0)) %>%
mutate(high_bmi = ifelse(bmi <= 30 & bmi > 25, 1, 0)) %>%
mutate(obese = ifelse(bmi > 30, 1, 0))
bmi_df
#### Create BMI ####
bmi_df <- olympics %>%
mutate(bmi = Weight / (0.01 * Height) ^2 ) %>%
select(Sex, Age, Height, Weight, Games, NOC, Medal,
gold, silver, bronze, no_medal, bmi, Event) %>%
mutate(low_bmi = ifelse(bmi <= 18.5, 1, 0)) %>%
mutate(medium_bmi = ifelse(bmi <= 25 & bmi > 18.5, 1, 0)) %>%
mutate(high_bmi = ifelse(bmi <= 30 & bmi > 25, 1, 0)) %>%
mutate(obese = ifelse(bmi > 30, 1, 0))
event_groups <- bmi_df %>%
group_by(Sex, Event) %>%
summarize(low_bmi = sum(low_bmi),
medium_bmi = sum(medium_bmi),
high_bmi = sum(high_bmi),
obese = sum(obese) )
View(event_groups)
View(event_groups)
event_bmi_sex <- plot_ly(seasons, x = ~Event, y = ~low_bmi,
type = 'bar')
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups, x = ~Event, y = ~low_bmi,
type = 'bar')
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), x = ~Event, y = ~low_bmi,
type = 'bar')
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), x = ~Event, y = ~low_bmi,
type = 'bar') %>%
layout(margin = list(b = 160), xaxis = list(tickangle = 45))
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(margin = list(b = 160), xaxis = list(tickangle = 45))
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(margin = list(b = 160), yaxis = list(tickangle = 45))
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(margin = list(b = 160), yaxis = list(tickangle = 45))
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar')
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(
margin = list(b = 50, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(
margin = list(b = 50, l = 100) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(
margin = list(b = 50, l = 500) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~Event, x = ~low_bmi,
type = 'bar') %>%
layout(
margin = list(b = 50, l = 300) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~low_bmi, x = ~Event,
type = 'bar') %>%
layout(
margin = list(b = 300, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~low_bmi, x = ~Event,
type = 'bar') %>%
add_trace(y = ~medium_bmi) %>%
add_trace(y = ~high_bmi) %>%
add_trace(y = ~obese) %>%
layout(
margin = list(b = 300, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~low_bmi, x = ~Event,
type = 'bar') %>%
add_trace(y = ~medium_bmi) %>%
add_trace(y = ~high_bmi) %>%
add_trace(y = ~obese) %>%
layout( xaxis(list(tickangle = 45)),
margin = list(b = 300, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~low_bmi, x = ~Event,
type = 'bar') %>%
add_trace(y = ~medium_bmi) %>%
add_trace(y = ~high_bmi) %>%
add_trace(y = ~obese) %>%
layout( xaxis = (list(tickangle = 45)),
margin = list(b = 300, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex
event_bmi_sex <- plot_ly(event_groups %>% filter(Sex == 'F'), y = ~low_bmi, x = ~Event,
type = 'bar') %>%
add_trace(y = ~medium_bmi) %>%
add_trace(y = ~high_bmi) %>%
add_trace(y = ~obese) %>%
layout( barmode = 'stack', xaxis = (list(tickangle = 45)),
margin = list(b = 300, l = 50) # to fully display the x and y axis labels
)
event_bmi_sex
